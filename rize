/**
 * Function to find two indices that sum up to the target value.
 * @param {number[]} nums - Array of numbers.
 * @param {number} target - Target sum.
 * @returns {number[]} - Array containing the indices of the two numbers that sum up to the target.
 */
function twoSum(nums, target) {
    // Create an empty object to store each number's index
    const numIndex = {};

    // Iterate through the array
    for (let i = 0; i < nums.length; i++) {
        // Calculate the complement needed to achieve the target sum
        const complement = target - nums[i];

        // Check if the complement exists in the numIndex object
        if (numIndex.hasOwnProperty(complement)) {
            // Return the indices of the current number and its complement
            return [numIndex[complement], i];
        }

        // Store the current number and its index in the numIndex object
        numIndex[nums[i]] = i;
    }

    // If no two numbers sum up to the target, return an empty array
    return [];
}

// Test cases
console.log(twoSum([2, 7, 11, 15], 9)); // Output: [0, 1] (2 + 7 = 9)
console.log(twoSum([3, 2, 4], 6)); // Output: [1, 2] (2 + 4 = 6)
console.log(twoSum([3, 3], 6)); // Output: [0, 1] (3 + 3 = 6)
console.log(twoSum([1, 2, 3, 4, 5], 10)); // Output: [3, 4] (4 + 5 = 10)
console.log(twoSum([], 10)); // Output: [] (Empty array)
console.log(twoSum([1, 2, 3, 4, 5], 2)); // Output: [] (No two numbers sum up to 2)
